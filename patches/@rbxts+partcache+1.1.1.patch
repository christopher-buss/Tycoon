diff --git a/node_modules/@rbxts/partcache/out/class.d.ts b/node_modules/@rbxts/partcache/out/class.d.ts
index 1f5df52..ace7adf 100644
--- a/node_modules/@rbxts/partcache/out/class.d.ts
+++ b/node_modules/@rbxts/partcache/out/class.d.ts
@@ -1,4 +1,4 @@
-export interface PartCache<T extends BasePart = BasePart> {
+export interface PartCache<T extends Instance = Instance> {
 	/**
 	 * Gets a part from the cache that isn't currently in use. If there are no more parts in the cache, it will send a warning to the output and add a new part to the cache.
 	 */
diff --git a/node_modules/@rbxts/partcache/out/index.d.ts b/node_modules/@rbxts/partcache/out/index.d.ts
index 6467360..5ff8e9d 100644
--- a/node_modules/@rbxts/partcache/out/index.d.ts
+++ b/node_modules/@rbxts/partcache/out/index.d.ts
@@ -4,7 +4,7 @@ interface PartCacheConstructor {
 	/**
 	 * Creates a new part cache using the specified template part, creating precreatedParts parts to grab from the cache. This will error if template is nil or precreatedParts < 0. By default precreatedParts is 5.
 	 */
-	new<T extends BasePart = BasePart>(template: T, precreatedParts: number): PartCache<T>;
+	new<T extends Instance = Instance>(template: T, precreatedParts: number, currentCacheParent?: Instance): PartCache<T>;
 }
 
 declare const PartCacheModule: PartCacheConstructor;
diff --git a/node_modules/@rbxts/partcache/out/init.lua b/node_modules/@rbxts/partcache/out/init.lua
index 8d4df7e..be51b69 100644
--- a/node_modules/@rbxts/partcache/out/init.lua
+++ b/node_modules/@rbxts/partcache/out/init.lua
@@ -32,11 +32,11 @@ PartCacheStatic.__type = "PartCache" -- For compatibility with TypeMarshaller
 
 -- TYPE DEFINITION: Part Cache Instance
 export type PartCache = {
-	Open: {[number]: BasePart},
-	InUse: {[number]: BasePart},
+	Open: { [number]: BasePart },
+	InUse: { [number]: BasePart },
 	CurrentCacheParent: Instance,
 	Template: BasePart,
-	ExpansionSize: number
+	ExpansionSize: number,
 }
 
 -----------------------------------------------------------
@@ -47,7 +47,8 @@ export type PartCache = {
 local CF_REALLY_FAR_AWAY = CFrame.new(0, 10e8, 0)
 
 -- Format params: methodName, ctorName
-local ERR_NOT_INSTANCE = "Cannot statically invoke method '%s' - It is an instance method. Call it on an instance of this class created via %s"
+local ERR_NOT_INSTANCE =
+	"Cannot statically invoke method '%s' - It is an instance method. Call it on an instance of this class created via %s"
 
 -- Format params: paramName, expectedType, actualType
 local ERR_INVALID_TYPE = "Invalid type for parameter '%s' (Expected %s, got %s)"
@@ -68,8 +69,7 @@ local function MakeFromTemplate(template: BasePart, currentCacheParent: Instance
 	local part: BasePart = template:Clone()
 	-- ^ Ignore W000 type mismatch between Instance and BasePart. False alert.
 
-	part.CFrame = CF_REALLY_FAR_AWAY
-	part.Anchored = true
+	part:PivotTo(CF_REALLY_FAR_AWAY)
 	part.Parent = currentCacheParent
 	return part
 end
@@ -81,8 +81,14 @@ function PartCacheStatic.new(template: BasePart, numPrecreatedParts: number?, cu
 	--PrecreatedParts value.
 	--Same thing. Ensure it's a number, ensure it's not negative, warn if it's really huge or 0.
 	assert(numPrecreatedParts > 0, "PrecreatedParts can not be negative!")
-	assertwarn(numPrecreatedParts ~= 0, "PrecreatedParts is 0! This may have adverse effects when initially using the cache.")
-	assertwarn(template.Archivable, "The template's Archivable property has been set to false, which prevents it from being cloned. It will temporarily be set to true.")
+	assertwarn(
+		numPrecreatedParts ~= 0,
+		"PrecreatedParts is 0! This may have adverse effects when initially using the cache."
+	)
+	assertwarn(
+		template.Archivable,
+		"The template's Archivable property has been set to false, which prevents it from being cloned. It will temporarily be set to true."
+	)
 
 	local oldArchivable = template.Archivable
 	template.Archivable = true
@@ -97,7 +103,7 @@ function PartCacheStatic.new(template: BasePart, numPrecreatedParts: number?, cu
 		InUse = {},
 		CurrentCacheParent = newCurrentCacheParent,
 		Template = template,
-		ExpansionSize = 10
+		ExpansionSize = 10,
 	}
 	setmetatable(object, PartCacheStatic)
 
@@ -116,7 +122,13 @@ function PartCacheStatic:GetPart(): BasePart
 	assert(getmetatable(self) == PartCacheStatic, ERR_NOT_INSTANCE:format("GetPart", "PartCache.new"))
 
 	if #self.Open == 0 then
-		warn("No parts available in the cache! Creating [" .. self.ExpansionSize .. "] new part instance(s) - this amount can be edited by changing the ExpansionSize property of the PartCache instance... (This cache now contains a grand total of " .. tostring(#self.Open + #self.InUse + self.ExpansionSize) .. " parts.)")
+		warn(
+			"No parts available in the cache! Creating ["
+				.. self.ExpansionSize
+				.. "] new part instance(s) - this amount can be edited by changing the ExpansionSize property of the PartCache instance... (This cache now contains a grand total of "
+				.. tostring(#self.Open + #self.InUse + self.ExpansionSize)
+				.. " parts.)"
+		)
 		for i = 1, self.ExpansionSize, 1 do
 			table.insert(self.Open, MakeFromTemplate(self.Template, self.CurrentCacheParent))
 		end
@@ -135,17 +147,25 @@ function PartCacheStatic:ReturnPart(part: BasePart)
 	if index ~= nil then
 		table.remove(self.InUse, index)
 		table.insert(self.Open, part)
-		part.CFrame = CF_REALLY_FAR_AWAY
-		part.Anchored = true
+		part:PivotTo(CF_REALLY_FAR_AWAY)
 	else
-		error("Attempted to return part \"" .. part.Name .. "\" (" .. part:GetFullName() .. ") to the cache, but it's not in-use! Did you call this on the wrong part?")
+		error(
+			'Attempted to return part "'
+				.. part.Name
+				.. '" ('
+				.. part:GetFullName()
+				.. ") to the cache, but it's not in-use! Did you call this on the wrong part?"
+		)
 	end
 end
 
 -- Sets the parent of all cached parts.
 function PartCacheStatic:SetCacheParent(newParent: Instance)
 	assert(getmetatable(self) == PartCacheStatic, ERR_NOT_INSTANCE:format("SetCacheParent", "PartCache.new"))
-	assert(newParent:IsDescendantOf(workspace) or newParent == workspace, "Cache parent is not a descendant of Workspace! Parts should be kept where they will remain in the visible world.")
+	assert(
+		newParent:IsDescendantOf(workspace) or newParent == workspace,
+		"Cache parent is not a descendant of Workspace! Parts should be kept where they will remain in the visible world."
+	)
 
 	self.CurrentCacheParent = newParent
 	for i = 1, #self.Open do
